import jwt from 'jsonwebtoken';
import { Context, Next } from 'koa';
import dotenv from 'dotenv';

dotenv.config();

console.log("üîë JWT_SECRET charg√© :", process.env.JWT_SECRET);

export async function verifyToken(ctx: Context, next: Next) {
    try {
        // 1Ô∏è‚É£ R√©cup√©rer le token depuis l‚ÄôURL
        const token = ctx.query.token as string;

        if (!token) {
            console.log("Aucun token fourni !");
            ctx.status = 401;
            ctx.body = { error: "Acc√®s refus√© : Aucun token fourni" };
            return;
        }

        console.log("üîç Token re√ßu :", token);

        // 2Ô∏è‚É£ V√©rifier la validit√© du token
        const decoded = jwt.verify(token, JWT_SECRET);
        console.log("‚úÖ Token valide ! D√©cod√© :", decoded);

        // 3Ô∏è‚É£ Stocker l'info de l‚Äôutilisateur dans `ctx.state`
        ctx.state.user = decoded;

        // 4Ô∏è‚É£ Continuer vers la route suivante
        await next();
    } catch (error) {
        console.log("√âchec de la v√©rification du token :", error.message);
        ctx.status = 403;
        ctx.body = { error: "Acc√®s refus√© : Token invalide ou expir√©" };
    }
}
